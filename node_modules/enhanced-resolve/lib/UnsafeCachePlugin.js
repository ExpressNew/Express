<<<<<<< HEAD
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
function UnsafeCachePlugin(regExps, cache) {
	this.regExps = regExps || [/./];
	if(this.regExps === true) this.regExps = [/./];
	else if(!Array.isArray(this.regExps)) this.regExps = [this.regExps];
	this.cache = cache || {};
}
module.exports = UnsafeCachePlugin;

UnsafeCachePlugin.prototype.apply = function(resolver) {
	var oldResolve = resolver.resolve;
	var regExps = this.regExps;
	var cache = this.cache;
	resolver.resolve = function resolve(context, request, callback) {
		var id = context + "->" + request;
		if(cache[id]) {
			// From cache
			return callback(null, cache[id]);
		}
		oldResolve.call(resolver, context, request, function(err, result) {
			if(err) return callback(err);
			var doCache = regExps.some(function(regExp) {
				return regExp.test(result.path);
			});
			if(!doCache) return callback(null, result);
			callback(null, cache[id] = result);
		});
	};
};
=======
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function getCacheId(request, withContext) {
	return JSON.stringify({
		context: withContext ? request.context : "",
		path: request.path,
		query: request.query,
		request: request.request
	});
}

module.exports = class UnsafeCachePlugin {
	constructor(source, filterPredicate, cache, withContext, target) {
		this.source = source;
		this.filterPredicate = filterPredicate;
		this.withContext = withContext;
		this.cache = cache || {};
		this.target = target;
	}

	apply(resolver) {
		const target = resolver.ensureHook(this.target);
		resolver.getHook(this.source).tapAsync("UnsafeCachePlugin", (request, resolveContext, callback) => {
			if(!this.filterPredicate(request)) return callback();
			const cacheId = getCacheId(request, this.withContext);
			const cacheEntry = this.cache[cacheId];
			if(cacheEntry) {
				return callback(null, cacheEntry);
			}
			resolver.doResolve(target, request, null, resolveContext, (err, result) => {
				if(err) return callback(err);
				if(result) return callback(null, this.cache[cacheId] = result);
				callback();
			});
		});
	}
};
>>>>>>> fe1d9cb169be8371e17b0f68d641d6b37e00413b
