<<<<<<< HEAD
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
var createInnerCallback = require("./createInnerCallback");

function ModulesInRootPlugin(moduleType, path) {
	this.moduleType = moduleType;
	this.path = path;
}
module.exports = ModulesInRootPlugin;

ModulesInRootPlugin.prototype.apply = function(resolver) {
	var moduleType = this.moduleType;
	var path = this.path;
	resolver.plugin("module", function(request, callback) {
		this.applyPluginsParallelBailResult("module-" + moduleType, {
			path: path,
			request: request.request,
			query: request.query,
			directory: request.directory
		}, createInnerCallback(function innerCallback(err, result) {
			if(err) return callback(err);
			if(!result) return callback();
			return callback(null, result);
		}, callback, "looking for modules in " + path));
	});
};
=======
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

module.exports = class ModulesInRootPlugin {
	constructor(source, path, target) {
		this.source = source;
		this.path = path;
		this.target = target;
	}

	apply(resolver) {
		const target = resolver.ensureHook(this.target);
		resolver.getHook(this.source).tapAsync("ModulesInRootPlugin", (request, resolveContext, callback) => {
			const obj = Object.assign({}, request, {
				path: this.path,
				request: "./" + request.request
			});
			resolver.doResolve(target, obj, "looking for modules in " + this.path, resolveContext, callback);
		});
	}
};
>>>>>>> fe1d9cb169be8371e17b0f68d641d6b37e00413b
